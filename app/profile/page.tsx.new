"use client";

import { useState, useEffect } from 'react';
import Image from 'next/image';
import { Card, CardContent } from '../components/ui/Card';
import { Button } from '../components/ui/Button';
import { User, Shield, Bell, Settings, LogOut } from 'lucide-react';
import { useAuth } from '../../contexts/AuthContext';

export default function ProfilePage() {
  const { user, signOut } = useAuth();
  const [activeTab, setActiveTab] = useState('profile');
  const [loading, setLoading] = useState(true);
  const [userData, setUserData] = useState({
    name: '',
    email: '',
    avatar: 'https://images.unsplash.com/photo-1633332755192-727a05c4013d?w=400&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8dXNlcnxlbnwwfHwwfHx8MA%3D%3D',
  });

  useEffect(() => {
    const loadUserProfile = async () => {
      if (!user) return;

      setLoading(true);
      try {
        // For demo purposes, we'll use mock data with the user's email
        setTimeout(() => {
          setUserData({
            name: user.email?.split('@')[0] || 'User',
            email: user.email || 'user@example.com',
            avatar: 'https://images.unsplash.com/photo-1633332755192-727a05c4013d?w=400&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8dXNlcnxlbnwwfHwwfHx8MA%3D%3D',
          });
          setLoading(false);
        }, 1000);
      } catch (error) {
        console.error('Error loading profile:', error);
        setLoading(false);
      }
    };

    loadUserProfile();
  }, [user]);

  const handleSignOut = async () => {
    try {
      await signOut();
      window.location.href = '/auth/signin';
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };

  const renderTabContent = () => {
    switch (activeTab) {
      case 'profile':
        return (
          <div className="space-y-6">
            <h3 className="text-lg font-medium">Personal Information</h3>
            <p className="text-sm text-gray-500 dark:text-gray-400">Your account details</p>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Full name</p>
                <p className="font-medium">{userData.name}</p>
              </div>
              <div className="space-y-2">
                <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Email address</p>
                <p className="font-medium">{userData.email}</p>
              </div>
            </div>
          </div>
        );
      case 'security':
        return (
          <div className="space-y-6">
            <h3 className="text-lg font-medium">Security Settings</h3>
            <p className="text-sm text-gray-500 dark:text-gray-400">Manage your account security</p>
            
            <div className="pt-4">
              <Button variant="outline">Change Password</Button>
            </div>
          </div>
        );
      case 'notifications':
        return (
          <div className="space-y-6">
            <h3 className="text-lg font-medium">Notification Preferences</h3>
            <p className="text-sm text-gray-500 dark:text-gray-400">Manage how you receive notifications</p>
          </div>
        );
      case 'settings':
        return (
          <div className="space-y-6">
            <h3 className="text-lg font-medium">Account Settings</h3>
            <p className="text-sm text-gray-500 dark:text-gray-400">Manage your account preferences</p>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <main className="px-6 py-8 md:px-8 lg:px-10 max-w-7xl mx-auto">
      <div className="space-y-6">
        {loading ? (
          <div className="flex justify-center items-center min-h-[400px]">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-[var(--primary-500)]"></div>
          </div>
        ) : (
          <>
            {/* Profile Header */}
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-6">
              <div className="flex items-center gap-4">
                <div className="w-16 h-16 rounded-full overflow-hidden shadow-md border-2 border-white dark:border-gray-800">
                  <Image
                    src={userData.avatar}
                    alt="Profile"
                    width={64}
                    height={64}
                    className="object-cover"
                  />
                </div>
                <div>
                  <h1 className="text-2xl font-bold">{userData.name}</h1>
                  <p className="text-gray-600 dark:text-gray-400">{userData.email}</p>
                </div>
              </div>
              <Button
                variant="outline"
                className="flex items-center gap-2"
                onClick={handleSignOut}
              >
                <LogOut className="h-4 w-4" />
                Sign Out
              </Button>
            </div>

            {/* Profile Content */}
            <div className="grid grid-cols-1 md:grid-cols-[240px_1fr] gap-6">
              {/* Sidebar */}
              <div>
                <Card>
                  <CardContent className="p-0">
                    <nav className="space-y-1">
                      <button
                        className={`flex items-center gap-3 w-full px-4 py-3 text-left text-sm font-medium ${activeTab === 'profile' ? 'bg-indigo-50 text-indigo-600 dark:bg-indigo-900/20 dark:text-indigo-400 border-l-4 border-indigo-600 dark:border-indigo-400' : 'text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800/50'}`}
                        onClick={() => setActiveTab('profile')}
                      >
                        <User className="h-5 w-5" />
                        Profile
                      </button>
                      <button
                        className={`flex items-center gap-3 w-full px-4 py-3 text-left text-sm font-medium ${activeTab === 'security' ? 'bg-indigo-50 text-indigo-600 dark:bg-indigo-900/20 dark:text-indigo-400 border-l-4 border-indigo-600 dark:border-indigo-400' : 'text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800/50'}`}
                        onClick={() => setActiveTab('security')}
                      >
                        <Shield className="h-5 w-5" />
                        Security
                      </button>
                      <button
                        className={`flex items-center gap-3 w-full px-4 py-3 text-left text-sm font-medium ${activeTab === 'notifications' ? 'bg-indigo-50 text-indigo-600 dark:bg-indigo-900/20 dark:text-indigo-400 border-l-4 border-indigo-600 dark:border-indigo-400' : 'text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800/50'}`}
                        onClick={() => setActiveTab('notifications')}
                      >
                        <Bell className="h-5 w-5" />
                        Notifications
                      </button>
                      <button
                        className={`flex items-center gap-3 w-full px-4 py-3 text-left text-sm font-medium ${activeTab === 'settings' ? 'bg-indigo-50 text-indigo-600 dark:bg-indigo-900/20 dark:text-indigo-400 border-l-4 border-indigo-600 dark:border-indigo-400' : 'text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800/50'}`}
                        onClick={() => setActiveTab('settings')}
                      >
                        <Settings className="h-5 w-5" />
                        Settings
                      </button>
                    </nav>
                  </CardContent>
                </Card>
              </div>

              {/* Main Content */}
              <div>
                <Card className="md:min-h-[600px]">
                  <CardContent className="p-6">
                    {renderTabContent()}
                  </CardContent>
                </Card>
              </div>
            </div>
          </>
        )}
      </div>
    </main>
  );
}
